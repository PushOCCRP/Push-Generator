exit
settings[:version_number]exiyt
settings[:version_number]
settings[:version_number
settings[:build_number]
c
project_path + "/Push/" + "about_text-#{language}.html"
project_path+'/Push'+'about_text-#{language}.html"
c
n
exit
"promotions/promotions-#{suffix}.yml"
exit
File.file?("promotions/promotions-#{suffix}.yml")
suffix
n
exit
suffix
c
c 
c
n
color
c
versionc
n
c
version_number
c
version_number
c
version_number.strip
build_number
c
build_number
down
version_number.strip
options
up
version_number
down
version_number
up
version_number
c
version_number
version+_number
options
up
version_number
down
version_number.strip
version_number
up
version_number
settings[:version_number]
up
settings[:version_number]
settings["android-bundle-identifier"]
settings
c
up
template
c
n
@rendered
b
settings
template
c
template
@rendered
c
settings
template
@rendered
n
exit
start_color
c
exit
start_color
c
image_name
exit
settings['short_name']
settings
c
exit
up
mode
c
success
exit
up
folders
c
options
exit
options
exit
path
exit
identifier_parts
path
project_path
path
c
exit
c
path
exit
path
text
exit
c
path
c
final_location
po final_location
c
exit
text.gsub(/<string name=\"app_name\">[A-z\s]*<\/string>/, "haha")
text.gsub(/<string name=\"app_name\">[A-z\s]*/, "haha")
text.gsub(/<string name=\"app_name\">[A-z]*/, "haha")
text.gsub(/<string name=\"app_name\">[A-z]*<\/string>/, "haha")
text.gsub(/<string name=\"app_name\">[A-z]*</string>/, "haha")
text.gsub(/<string name=\"app_name\">[A-z]*<\/string>/, "haha")
text.gsub(/<string name=\"app_name\">[A-z]*<\string>/, "haha")
text.gsub(/<string name=\"app_name\"/, "haha")
text.gsub(/<string name=\"app_name/, "haha")
text.gsub(/<string name=\"/, "haha")
text.gsub(/<string name=\\\\/, "haha")
text.gsub(/<string name=\\\/, "haha")
text.gsub(/<string name=\/, "haha")
text.gsub(/<string name=\\/, "haha")
text.gsub(/<string name=/, "haha")
text.gsub(/<string name=>/, "haha")
text.gsub(/<string name=\">/, "haha")
text.gsub(/<string name=\\">/, "haha")
text.gsub(/<string name=\\\">/, "haha")
text.gsub(/<string name=\\\"app_name\\\">/, "haha")
text.gsub(/<string name=\"/, "haha")
text.gsub(/<string name=\\\"/, "haha")
text.gsub(/<string name=/, "haha")
text.gsub(/<string/, "haha")
text.gsub(/<string name=\\\"app_name\\\">/, "haha")
text.gsub(/</, "haha")
text.gsub(/<string name=\\\"app_name\\\">[A-z\s]*<\/string>/, "haha")
exit
text.gsub(/<string name=\\\"app_name\\\">[A-z\\s]*<\/string>/, "haha")
text.gsub(/<string name=\\\"app_name\\\">[A-z\s]*<\/string>/, "haha")
text.gsub(/<string name=\\\"app_name\\\">[A-z\s]*<\/string>/, "haha"
text.gsub(/<string name=\\\"app_name\\\">[A-z\s]*<\/string>/){|r| p r}
text.gsub(/<string name=\\\"app_name\\\">[A-z\s]*<\/string>/){|r| pp r}
end
pp r
text.gsub /<string name=\\\"app_name\\\">[A-z\s]*<\/string>/ do |r|
replaced_text
exit
replaced_text
text
c
settings['languages']
folders
exit
settings[:languages]
settings['languages']
setting['languages']
setting['languageslanguages']
setting[:languages]
setting['languages']
settings
c
options
exit
options
options[:mode]
exit
options
exit
options
c
image_sizes.keys[0].class
image_sizes.keys[0]
image_sizes[image_sizes.keys[0]]
image_sizes[images_sizes.keys[0]]
image_sizes
n
image_sizes.keys
image_sizes
c
File.exist? ios_project_path.strip
File.exist? ios_project_path.squish!
File.exist? ios_project_path.squish
File.exist? '/Users/christopher/Repositories/Push/Push-iOS'
File.exist? /Users/christopher/Repositories/Push/Push-iOS
File.exist? ios_project_path
ios_project_path
c
settings[:credentials]
settings["credentials"]
settings
@settings
c
@rendered
n
template
settings
n
template
c
pp credentials
credentials
n
template
n
content
n
content
c
content
n
c
content
n
temp_file.size
temp_file
temp_file = File.open(file_name, "r")
file_name
c
file_name
n
c
f
c
n
c
content
n
file_name
c
n
type
c
template
up
u
template
n
file_name
n
file_name
n
default_name
file_name
