# Push Generator - v1.0
# ©Christopher Guess/ICFJ 2016 
require 'optparse'
require 'byebug'
require 'yaml'
require 'json'
require 'erb'
require 'fileutils'
require 'find'
require 'pp'
require 'colorize'
require 'commander/import'
require 'open3'



class TranslationParser
  include Commander::Methods

  def run
	program :name, 'Push App Translation Parser'
	program :version, '1.0.0'
	program :description, 'A script to generate iOS and Android translation files from a JSON file template.'

    command :run do |c|
      c.syntax = 'translator run'
      c.description = 'Generate'

      c.option '--ios'
	  c.option '--android'

      c.action do |args, options|
        options.default \
        	:ios => false,
        	:android => false
        
        # If no flag is indicated, do both
        if options.ios == false && options.android == false
        	options.ios = true
        	options.android = true
        end

        translator = Translator.new
        translator.translateFiles options.ios, options.android
      end
    end

    run!
  end
end

class Translator

	def translateFiles(ios = false, android = false)
		@files = getListOfLanguageFiles
		@files.each do |file| 
			key_values = parseStrings(file)
			generateiOSTranslationFile(key_values) if ios
			generateAndroidTranslationFile(key_values) if android
		end
	end

	def getListOfLanguageFiles
		return Dir['./translatable-string-*.yml']
	end

	def parseStrings file
		yaml = YAML.load_file(file)
		return yaml
	end

	def generateiOSTranslationFile key_values
		language_code = key_values['language-short-code']
		filename = "Langauge.strings-en"

		Dir.mkdir("./ios") unless File.directory?("./ios")

		File.open("./ios/#{language_code}.strings", 'w+') do |file|
			writeIOSHeaderText key_values, file
			key_values.each do |key, value|
				key = capitalizeString(key)
				file.write("\"#{key}\" = \"#{value}\";")
				file.write("\n\n")
			end
		end
	end

	def writeIOSHeaderText key_values, file
		file.write "/*\n"
		file.write "Strings-Russian.strings\n"
		file.write "\n"
		file.write "Push\n"
		file.write "\n"
		file.write "Created by Christopher Guess on #{Time.now.strftime("%m/%d/%Y")}\n"
		file.write "Copyright © #{Time.now.strftime("%Y")} Christopher Guess. All Rights Reserved.\n"
		file.write "\n"
		file.write "This file was automatically generated by push-translate.rb at #{Time.now.strftime("%m/%d/%y %H:%M:%S %Z %z")}.\n"
		file.write "*/\n\n"
	end


	def generateAndroidTranslationFile key_values
		language_code = key_values['language-short-code']

		Dir.mkdir("./android") unless File.directory?("./android")

		File.open("./android/strings.xml-#{language_code}", 'w+') do |file|
			writeAndroidHeaderText key_values, file
			key_values.each do |key, value|
				key = underscoreString(key)
				file.write("    <string name=\"#{key}\">#{value}</string>\n")
			end
			writeAndroidFooterText key_values, file
		end

	end

	def writeAndroidHeaderText key_values, file
		file.write "<resources>\n"
	end

	def writeAndroidFooterText key_values, file
		file.write "</resources>"
	end

	def capitalizeString string
		# This will camelcase the key
		key_parts = string.split('-')
		key_parts.each{|key_part| key_part.capitalize!}
		return key_parts.join
	end

	def underscoreString string
		# This will replace all dashes with underscores
		key_parts = string.split('-')
		return key_parts.join('_')
	end
end

TranslationParser.new.run if $0 == __FILE__

